// Code generated by protoc-gen-go. DO NOT EDIT.
// source: replay.proto

package events

import (
	fmt "fmt"
	destinations "github.com/batchcorp/schemas/build/go/events/destinations"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Replay struct {
	// Replay id in DB
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Filter is used by the search service to find fitting events and pushing
	// them to HSB for consumption by the replay service.
	Filter *Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Used by reader to know which index to use
	CollectId string `protobuf:"bytes,3,opt,name=collect_id,json=collectId,proto3" json:"collect_id,omitempty"`
	// Emitted by reader via an UPDATE_SCHEMA message
	// Consumed by ui-bff for storage to perform a replay redo
	// Consumed by reader in a CREATE_SCHEMA message in order to perform a replay redo
	QueryExecutionId string `protobuf:"bytes,4,opt,name=query_execution_id,json=queryExecutionId,proto3" json:"query_execution_id,omitempty"`
	// Used by the replay service
	//
	// Types that are valid to be assigned to Dst:
	//	*Replay_Http
	//	*Replay_Sqs
	//	*Replay_Amqp
	//	*Replay_Kafka
	Dst                  isReplay_Dst `protobuf_oneof:"dst"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Replay) Reset()         { *m = Replay{} }
func (m *Replay) String() string { return proto.CompactTextString(m) }
func (*Replay) ProtoMessage()    {}
func (*Replay) Descriptor() ([]byte, []int) {
	return fileDescriptor_eed9461330ccfc03, []int{0}
}

func (m *Replay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Replay.Unmarshal(m, b)
}
func (m *Replay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Replay.Marshal(b, m, deterministic)
}
func (m *Replay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Replay.Merge(m, src)
}
func (m *Replay) XXX_Size() int {
	return xxx_messageInfo_Replay.Size(m)
}
func (m *Replay) XXX_DiscardUnknown() {
	xxx_messageInfo_Replay.DiscardUnknown(m)
}

var xxx_messageInfo_Replay proto.InternalMessageInfo

func (m *Replay) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Replay) GetFilter() *Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *Replay) GetCollectId() string {
	if m != nil {
		return m.CollectId
	}
	return ""
}

func (m *Replay) GetQueryExecutionId() string {
	if m != nil {
		return m.QueryExecutionId
	}
	return ""
}

type isReplay_Dst interface {
	isReplay_Dst()
}

type Replay_Http struct {
	Http *destinations.HTTP `protobuf:"bytes,100,opt,name=http,proto3,oneof"`
}

type Replay_Sqs struct {
	Sqs *destinations.SQS `protobuf:"bytes,101,opt,name=sqs,proto3,oneof"`
}

type Replay_Amqp struct {
	Amqp *destinations.AMQP `protobuf:"bytes,102,opt,name=amqp,proto3,oneof"`
}

type Replay_Kafka struct {
	Kafka *destinations.Kafka `protobuf:"bytes,103,opt,name=kafka,proto3,oneof"`
}

func (*Replay_Http) isReplay_Dst() {}

func (*Replay_Sqs) isReplay_Dst() {}

func (*Replay_Amqp) isReplay_Dst() {}

func (*Replay_Kafka) isReplay_Dst() {}

func (m *Replay) GetDst() isReplay_Dst {
	if m != nil {
		return m.Dst
	}
	return nil
}

func (m *Replay) GetHttp() *destinations.HTTP {
	if x, ok := m.GetDst().(*Replay_Http); ok {
		return x.Http
	}
	return nil
}

func (m *Replay) GetSqs() *destinations.SQS {
	if x, ok := m.GetDst().(*Replay_Sqs); ok {
		return x.Sqs
	}
	return nil
}

func (m *Replay) GetAmqp() *destinations.AMQP {
	if x, ok := m.GetDst().(*Replay_Amqp); ok {
		return x.Amqp
	}
	return nil
}

func (m *Replay) GetKafka() *destinations.Kafka {
	if x, ok := m.GetDst().(*Replay_Kafka); ok {
		return x.Kafka
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Replay) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Replay_Http)(nil),
		(*Replay_Sqs)(nil),
		(*Replay_Amqp)(nil),
		(*Replay_Kafka)(nil),
	}
}

func init() {
	proto.RegisterType((*Replay)(nil), "events.Replay")
}

func init() { proto.RegisterFile("replay.proto", fileDescriptor_eed9461330ccfc03) }

var fileDescriptor_eed9461330ccfc03 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xe1, 0x6a, 0xf2, 0x30,
	0x14, 0x86, 0xb5, 0x6a, 0xc1, 0x7c, 0x22, 0xdf, 0x32, 0xd8, 0x82, 0x30, 0x90, 0xc1, 0x86, 0x30,
	0x49, 0x61, 0xbb, 0x82, 0x09, 0x1b, 0x95, 0x31, 0x98, 0xd5, 0x5f, 0xfb, 0x23, 0x69, 0x12, 0x6d,
	0xb0, 0x9a, 0xb6, 0x49, 0xc7, 0xbc, 0xb7, 0x5d, 0xdc, 0xc8, 0x69, 0x85, 0x15, 0xfc, 0x7b, 0x9e,
	0xe7, 0x9c, 0xbc, 0x79, 0xd1, 0xa0, 0x90, 0x59, 0xca, 0x8e, 0x34, 0x2b, 0xb4, 0xd5, 0xd8, 0x97,
	0x5f, 0xf2, 0x60, 0xcd, 0x68, 0xb0, 0x51, 0xa9, 0x95, 0x45, 0x35, 0x1d, 0x5d, 0x0b, 0x69, 0xac,
	0x3a, 0x30, 0xab, 0xf4, 0xc1, 0x04, 0x89, 0xb5, 0x59, 0x0d, 0xae, 0x1a, 0xc0, 0xe4, 0xe6, 0xec,
	0x02, 0xdb, 0xe7, 0xa7, 0x05, 0xd2, 0x00, 0x3b, 0xb6, 0xd9, 0xb1, 0x8a, 0xdc, 0xfe, 0x78, 0xc8,
	0x8f, 0x20, 0x0a, 0x1e, 0x22, 0x4f, 0x09, 0xd2, 0x1e, 0xb7, 0x27, 0xfd, 0xc8, 0x53, 0x02, 0xdf,
	0x23, 0xbf, 0x8a, 0x43, 0xbc, 0x71, 0x7b, 0xf2, 0xef, 0x71, 0x48, 0xab, 0x94, 0xf4, 0x15, 0xa6,
	0x51, 0x4d, 0xf1, 0x0d, 0x42, 0x5c, 0xa7, 0xa9, 0xe4, 0x76, 0xad, 0x04, 0xe9, 0xc0, 0x7e, 0xbf,
	0x9e, 0xcc, 0x05, 0x9e, 0x22, 0x9c, 0x97, 0xb2, 0x38, 0xae, 0xe5, 0xb7, 0xe4, 0xa5, 0x4b, 0xe0,
	0xb4, 0x2e, 0x68, 0xff, 0x81, 0xbc, 0x9c, 0xc0, 0x5c, 0xe0, 0x09, 0xea, 0xba, 0x8f, 0x12, 0x01,
	0x4f, 0x62, 0xfa, 0x37, 0x38, 0x0d, 0x57, 0xab, 0x8f, 0xb0, 0x15, 0x81, 0x81, 0xef, 0x50, 0xc7,
	0xe4, 0x86, 0x48, 0x10, 0x2f, 0x9a, 0xe2, 0x72, 0xb1, 0x0c, 0x5b, 0x91, 0xe3, 0xee, 0xa0, 0x2b,
	0x82, 0x6c, 0xce, 0x1d, 0x7c, 0x7e, 0x5f, 0xc0, 0x41, 0x67, 0xe0, 0x07, 0xd4, 0x83, 0x66, 0xc8,
	0x16, 0xd4, 0xcb, 0xa6, 0xfa, 0xe6, 0x50, 0xd8, 0x8a, 0x2a, 0x67, 0xd6, 0x43, 0x1d, 0x61, 0xec,
	0x8c, 0x7e, 0x4e, 0xb7, 0xca, 0x26, 0x65, 0x4c, 0xb9, 0xde, 0x07, 0x31, 0xb3, 0x3c, 0xe1, 0xba,
	0xc8, 0x02, 0xc3, 0x13, 0xb9, 0x67, 0x26, 0x88, 0x4b, 0x95, 0x8a, 0x60, 0xab, 0x83, 0xaa, 0xba,
	0xd8, 0x87, 0xd6, 0x9f, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x45, 0x19, 0x41, 0xf7, 0xff, 0x01,
	0x00, 0x00,
}
