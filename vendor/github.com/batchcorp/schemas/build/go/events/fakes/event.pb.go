// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event.proto

package fakes

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EventType int32

const (
	EventType_EVENT_TYPE_UNSET    EventType = 0
	EventType_EVENT_TYPE_BILLING  EventType = 1
	EventType_EVENT_TYPE_SEARCH   EventType = 4
	EventType_EVENT_TYPE_PRODUCTS EventType = 10
	EventType_EVENT_TYPE_USERS    EventType = 11
	EventType_EVENT_TYPE_POSTS    EventType = 12
	EventType_EVENT_TYPE_COINS    EventType = 13
	EventType_EVENT_TYPE_WEATHER  EventType = 14
)

var EventType_name = map[int32]string{
	0:  "EVENT_TYPE_UNSET",
	1:  "EVENT_TYPE_BILLING",
	4:  "EVENT_TYPE_SEARCH",
	10: "EVENT_TYPE_PRODUCTS",
	11: "EVENT_TYPE_USERS",
	12: "EVENT_TYPE_POSTS",
	13: "EVENT_TYPE_COINS",
	14: "EVENT_TYPE_WEATHER",
}

var EventType_value = map[string]int32{
	"EVENT_TYPE_UNSET":    0,
	"EVENT_TYPE_BILLING":  1,
	"EVENT_TYPE_SEARCH":   4,
	"EVENT_TYPE_PRODUCTS": 10,
	"EVENT_TYPE_USERS":    11,
	"EVENT_TYPE_POSTS":    12,
	"EVENT_TYPE_COINS":    13,
	"EVENT_TYPE_WEATHER":  14,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{0}
}

type Event struct {
	Type          EventType `protobuf:"varint,1,opt,name=type,proto3,enum=fakes.EventType" json:"type,omitempty"`
	TimestampNano int64     `protobuf:"varint,2,opt,name=timestamp_nano,json=timestampNano,proto3" json:"timestamp_nano,omitempty"`
	RequestId     string    `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Source        string    `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*Event_Billing
	//	*Event_Search
	//	*Event_Product
	//	*Event_User
	//	*Event_Post
	//	*Event_Coin
	//	*Event_Weather
	Event                isEvent_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{0}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventType_EVENT_TYPE_UNSET
}

func (m *Event) GetTimestampNano() int64 {
	if m != nil {
		return m.TimestampNano
	}
	return 0
}

func (m *Event) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *Event) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_Billing struct {
	Billing *Billing `protobuf:"bytes,100,opt,name=billing,proto3,oneof"`
}

type Event_Search struct {
	Search *Search `protobuf:"bytes,101,opt,name=search,proto3,oneof"`
}

type Event_Product struct {
	Product *Product `protobuf:"bytes,102,opt,name=product,proto3,oneof"`
}

type Event_User struct {
	User *User `protobuf:"bytes,103,opt,name=user,proto3,oneof"`
}

type Event_Post struct {
	Post *Post `protobuf:"bytes,104,opt,name=post,proto3,oneof"`
}

type Event_Coin struct {
	Coin *Coin `protobuf:"bytes,105,opt,name=coin,proto3,oneof"`
}

type Event_Weather struct {
	Weather *Weather `protobuf:"bytes,106,opt,name=weather,proto3,oneof"`
}

func (*Event_Billing) isEvent_Event() {}

func (*Event_Search) isEvent_Event() {}

func (*Event_Product) isEvent_Event() {}

func (*Event_User) isEvent_Event() {}

func (*Event_Post) isEvent_Event() {}

func (*Event_Coin) isEvent_Event() {}

func (*Event_Weather) isEvent_Event() {}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Event) GetBilling() *Billing {
	if x, ok := m.GetEvent().(*Event_Billing); ok {
		return x.Billing
	}
	return nil
}

func (m *Event) GetSearch() *Search {
	if x, ok := m.GetEvent().(*Event_Search); ok {
		return x.Search
	}
	return nil
}

func (m *Event) GetProduct() *Product {
	if x, ok := m.GetEvent().(*Event_Product); ok {
		return x.Product
	}
	return nil
}

func (m *Event) GetUser() *User {
	if x, ok := m.GetEvent().(*Event_User); ok {
		return x.User
	}
	return nil
}

func (m *Event) GetPost() *Post {
	if x, ok := m.GetEvent().(*Event_Post); ok {
		return x.Post
	}
	return nil
}

func (m *Event) GetCoin() *Coin {
	if x, ok := m.GetEvent().(*Event_Coin); ok {
		return x.Coin
	}
	return nil
}

func (m *Event) GetWeather() *Weather {
	if x, ok := m.GetEvent().(*Event_Weather); ok {
		return x.Weather
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Event) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Event_Billing)(nil),
		(*Event_Search)(nil),
		(*Event_Product)(nil),
		(*Event_User)(nil),
		(*Event_Post)(nil),
		(*Event_Coin)(nil),
		(*Event_Weather)(nil),
	}
}

func init() {
	proto.RegisterEnum("fakes.EventType", EventType_name, EventType_value)
	proto.RegisterType((*Event)(nil), "fakes.Event")
}

func init() { proto.RegisterFile("event.proto", fileDescriptor_2d17a9d3f0ddf27e) }

var fileDescriptor_2d17a9d3f0ddf27e = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc7, 0x1b, 0xfa, 0x31, 0xf5, 0x74, 0xad, 0x8c, 0x81, 0x61, 0x55, 0x42, 0x2a, 0x08, 0x44,
	0xb5, 0x8b, 0x46, 0x2a, 0xbc, 0xc0, 0x5a, 0x22, 0x52, 0x69, 0x4a, 0x23, 0x27, 0x65, 0x82, 0x9b,
	0x2a, 0x1f, 0x5e, 0x13, 0x68, 0xe3, 0x10, 0x27, 0xa0, 0xbd, 0x12, 0xaf, 0xc1, 0x8b, 0x4d, 0x76,
	0x9c, 0xa9, 0xed, 0x5d, 0xfc, 0xfb, 0xff, 0x74, 0x72, 0x7c, 0x8e, 0x61, 0xc0, 0xfe, 0xb0, 0xac,
	0x9c, 0xe5, 0x05, 0x2f, 0x39, 0xee, 0xde, 0x07, 0xbf, 0x98, 0x18, 0x0f, 0xc3, 0x74, 0xbf, 0x4f,
	0xb3, 0x5d, 0x4d, 0xc7, 0x10, 0xf1, 0x34, 0x6b, 0xbe, 0x73, 0x2e, 0xb4, 0x3d, 0x1e, 0xe6, 0x05,
	0x8f, 0xab, 0xa8, 0x39, 0x5e, 0x0a, 0x16, 0x14, 0x51, 0xd2, 0x88, 0x95, 0x60, 0x45, 0x23, 0xfe,
	0x65, 0x41, 0x99, 0x34, 0xc7, 0x77, 0xff, 0xda, 0xd0, 0xb5, 0xe4, 0x5f, 0xf1, 0x7b, 0xe8, 0x94,
	0x0f, 0x39, 0x23, 0xc6, 0xc4, 0x98, 0x8e, 0xe6, 0x68, 0xa6, 0x7e, 0x3f, 0x53, 0x99, 0xff, 0x90,
	0x33, 0xaa, 0x52, 0xfc, 0x01, 0x46, 0x65, 0x7a, 0x60, 0xa2, 0x0c, 0x0e, 0xf9, 0x36, 0x0b, 0x32,
	0x4e, 0x9e, 0x4d, 0x8c, 0x69, 0x9b, 0x0e, 0x9f, 0xa8, 0x13, 0x64, 0x1c, 0xbf, 0x01, 0x28, 0xd8,
	0xef, 0x8a, 0x89, 0x72, 0x9b, 0xc6, 0xa4, 0x3d, 0x31, 0xa6, 0x7d, 0xda, 0xd7, 0x64, 0x15, 0xe3,
	0x2b, 0xe8, 0x09, 0x5e, 0x15, 0x11, 0x23, 0x1d, 0x15, 0xe9, 0x13, 0xbe, 0x86, 0x0b, 0x7d, 0x5d,
	0x12, 0x4f, 0x8c, 0xe9, 0x60, 0x3e, 0xd2, 0x6d, 0x2c, 0x6a, 0x6a, 0xb7, 0x68, 0x23, 0xe0, 0x8f,
	0xd0, 0xab, 0x2f, 0x49, 0x98, 0x52, 0x87, 0x5a, 0xf5, 0x14, 0xb4, 0x5b, 0x54, 0xc7, 0xb2, 0xa8,
	0x1e, 0x0e, 0xb9, 0x3f, 0x29, 0xea, 0xd6, 0x54, 0x16, 0xd5, 0x02, 0x7e, 0x0b, 0x1d, 0x39, 0x2b,
	0xb2, 0x53, 0xe2, 0x40, 0x8b, 0x1b, 0xc1, 0x0a, 0xbb, 0x45, 0x55, 0x24, 0x15, 0x39, 0x77, 0x92,
	0x9c, 0x28, 0x2e, 0x17, 0xb2, 0x90, 0x8a, 0xa4, 0x22, 0xd7, 0x44, 0xd2, 0x13, 0x65, 0xc9, 0xd3,
	0x4c, 0x2a, 0x32, 0x92, 0x4d, 0xe9, 0x45, 0x90, 0x9f, 0x27, 0x4d, 0xdd, 0xd5, 0x54, 0x36, 0xa5,
	0x85, 0xc5, 0x05, 0x74, 0xd5, 0xc3, 0xb8, 0xfe, 0x6f, 0x40, 0xff, 0x69, 0x21, 0xf8, 0x25, 0x20,
	0xeb, 0x9b, 0xe5, 0xf8, 0x5b, 0xff, 0xbb, 0x6b, 0x6d, 0x37, 0x8e, 0x67, 0xf9, 0xa8, 0x85, 0xaf,
	0x00, 0x1f, 0xd1, 0xc5, 0xea, 0xf6, 0x76, 0xe5, 0x7c, 0x45, 0x06, 0x7e, 0x05, 0xcf, 0x8f, 0xb8,
	0x67, 0xdd, 0xd0, 0xa5, 0x8d, 0x3a, 0xf8, 0x35, 0xbc, 0x38, 0xc2, 0x2e, 0x5d, 0x7f, 0xd9, 0x2c,
	0x7d, 0x0f, 0xc1, 0x79, 0x75, 0xcf, 0xa2, 0x1e, 0x1a, 0x9c, 0x51, 0x77, 0xed, 0xf9, 0x1e, 0xba,
	0x3c, 0xa3, 0xcb, 0xf5, 0xca, 0xf1, 0xd0, 0xf0, 0xac, 0x93, 0x3b, 0xeb, 0xc6, 0xb7, 0x2d, 0x8a,
	0x46, 0x8b, 0xcf, 0x3f, 0xe6, 0xbb, 0xb4, 0x4c, 0xaa, 0x70, 0x16, 0xf1, 0x83, 0x19, 0x06, 0x65,
	0x94, 0x44, 0xbc, 0xc8, 0x4d, 0x11, 0x25, 0xec, 0x10, 0x08, 0x33, 0xac, 0xd2, 0x7d, 0x6c, 0xee,
	0xb8, 0xa9, 0x2e, 0x2d, 0x4c, 0x35, 0x97, 0xb0, 0xa7, 0xde, 0xeb, 0xa7, 0xc7, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xdf, 0x73, 0x2e, 0xbd, 0x24, 0x03, 0x00, 0x00,
}
