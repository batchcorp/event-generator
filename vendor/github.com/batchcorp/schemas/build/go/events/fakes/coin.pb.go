// Code generated by protoc-gen-go. DO NOT EDIT.
// source: coin.proto

package fakes

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CoinType int32

const (
	CoinType_COIN_TYPE_UNSET    CoinType = 0
	CoinType_COIN_TYPE_BITCOIN  CoinType = 1
	CoinType_COIN_TYPE_ETHEREUM CoinType = 2
	CoinType_COIN_TYPE_TETHER   CoinType = 3
	CoinType_COIN_TYPE_USDCOIN  CoinType = 4
	CoinType_COIN_TYPE_XRP      CoinType = 5
	CoinType_COIN_TYPE_BNB      CoinType = 6
	CoinType_COIN_TYPE_BUSD     CoinType = 7
	CoinType_COIN_TYPE_DOGECOIN CoinType = 8
	CoinType_COIN_TYPE_CARDANO  CoinType = 9
	CoinType_COIN_TYPE_POLYGON  CoinType = 10
	CoinType_COIN_TYPE_LITECOIN CoinType = 11
	CoinType_COIN_TYPE_DAI      CoinType = 12
	CoinType_COIN_TYPE_TRON     CoinType = 13
)

var CoinType_name = map[int32]string{
	0:  "COIN_TYPE_UNSET",
	1:  "COIN_TYPE_BITCOIN",
	2:  "COIN_TYPE_ETHEREUM",
	3:  "COIN_TYPE_TETHER",
	4:  "COIN_TYPE_USDCOIN",
	5:  "COIN_TYPE_XRP",
	6:  "COIN_TYPE_BNB",
	7:  "COIN_TYPE_BUSD",
	8:  "COIN_TYPE_DOGECOIN",
	9:  "COIN_TYPE_CARDANO",
	10: "COIN_TYPE_POLYGON",
	11: "COIN_TYPE_LITECOIN",
	12: "COIN_TYPE_DAI",
	13: "COIN_TYPE_TRON",
}

var CoinType_value = map[string]int32{
	"COIN_TYPE_UNSET":    0,
	"COIN_TYPE_BITCOIN":  1,
	"COIN_TYPE_ETHEREUM": 2,
	"COIN_TYPE_TETHER":   3,
	"COIN_TYPE_USDCOIN":  4,
	"COIN_TYPE_XRP":      5,
	"COIN_TYPE_BNB":      6,
	"COIN_TYPE_BUSD":     7,
	"COIN_TYPE_DOGECOIN": 8,
	"COIN_TYPE_CARDANO":  9,
	"COIN_TYPE_POLYGON":  10,
	"COIN_TYPE_LITECOIN": 11,
	"COIN_TYPE_DAI":      12,
	"COIN_TYPE_TRON":     13,
}

func (x CoinType) String() string {
	return proto.EnumName(CoinType_name, int32(x))
}

func (CoinType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_39141bafd5884f78, []int{0}
}

type Coin struct {
	Type                 CoinType `protobuf:"varint,1,opt,name=type,proto3,enum=fakes.CoinType" json:"type,omitempty"`
	IconUrl              string   `protobuf:"bytes,2,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Symbol               string   `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Rank                 int64    `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`
	Price                int64    `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	Volume               float32  `protobuf:"fixed32,7,opt,name=volume,proto3" json:"volume,omitempty"`
	MarketCap            float32  `protobuf:"fixed32,8,opt,name=market_cap,json=marketCap,proto3" json:"market_cap,omitempty"`
	AvailableSupply      int64    `protobuf:"varint,9,opt,name=available_supply,json=availableSupply,proto3" json:"available_supply,omitempty"`
	TotalSupply          int64    `protobuf:"varint,10,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
	PercentChange_1H     float32  `protobuf:"fixed32,11,opt,name=percent_change_1h,json=percentChange1h,proto3" json:"percent_change_1h,omitempty"`
	PercentChange_24H    float32  `protobuf:"fixed32,12,opt,name=percent_change_24h,json=percentChange24h,proto3" json:"percent_change_24h,omitempty"`
	PercentChange_7D     float32  `protobuf:"fixed32,13,opt,name=percent_change_7d,json=percentChange7d,proto3" json:"percent_change_7d,omitempty"`
	Description          string   `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	WebsiteUrl           string   `protobuf:"bytes,15,opt,name=website_url,json=websiteUrl,proto3" json:"website_url,omitempty"`
	TwitterUrl           string   `protobuf:"bytes,16,opt,name=twitter_url,json=twitterUrl,proto3" json:"twitter_url,omitempty"`
	LastUpdated          int64    `protobuf:"varint,17,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Coin) Reset()         { *m = Coin{} }
func (m *Coin) String() string { return proto.CompactTextString(m) }
func (*Coin) ProtoMessage()    {}
func (*Coin) Descriptor() ([]byte, []int) {
	return fileDescriptor_39141bafd5884f78, []int{0}
}

func (m *Coin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Coin.Unmarshal(m, b)
}
func (m *Coin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Coin.Marshal(b, m, deterministic)
}
func (m *Coin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coin.Merge(m, src)
}
func (m *Coin) XXX_Size() int {
	return xxx_messageInfo_Coin.Size(m)
}
func (m *Coin) XXX_DiscardUnknown() {
	xxx_messageInfo_Coin.DiscardUnknown(m)
}

var xxx_messageInfo_Coin proto.InternalMessageInfo

func (m *Coin) GetType() CoinType {
	if m != nil {
		return m.Type
	}
	return CoinType_COIN_TYPE_UNSET
}

func (m *Coin) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

func (m *Coin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Coin) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Coin) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *Coin) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Coin) GetVolume() float32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *Coin) GetMarketCap() float32 {
	if m != nil {
		return m.MarketCap
	}
	return 0
}

func (m *Coin) GetAvailableSupply() int64 {
	if m != nil {
		return m.AvailableSupply
	}
	return 0
}

func (m *Coin) GetTotalSupply() int64 {
	if m != nil {
		return m.TotalSupply
	}
	return 0
}

func (m *Coin) GetPercentChange_1H() float32 {
	if m != nil {
		return m.PercentChange_1H
	}
	return 0
}

func (m *Coin) GetPercentChange_24H() float32 {
	if m != nil {
		return m.PercentChange_24H
	}
	return 0
}

func (m *Coin) GetPercentChange_7D() float32 {
	if m != nil {
		return m.PercentChange_7D
	}
	return 0
}

func (m *Coin) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Coin) GetWebsiteUrl() string {
	if m != nil {
		return m.WebsiteUrl
	}
	return ""
}

func (m *Coin) GetTwitterUrl() string {
	if m != nil {
		return m.TwitterUrl
	}
	return ""
}

func (m *Coin) GetLastUpdated() int64 {
	if m != nil {
		return m.LastUpdated
	}
	return 0
}

func init() {
	proto.RegisterEnum("fakes.CoinType", CoinType_name, CoinType_value)
	proto.RegisterType((*Coin)(nil), "fakes.Coin")
}

func init() { proto.RegisterFile("coin.proto", fileDescriptor_39141bafd5884f78) }

var fileDescriptor_39141bafd5884f78 = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xdf, 0x4e, 0xdb, 0x30,
	0x14, 0xc6, 0xd7, 0xd2, 0x96, 0xf6, 0xb4, 0x50, 0xd7, 0x63, 0xc8, 0xbb, 0x98, 0x28, 0xdb, 0x4d,
	0x87, 0xa6, 0x56, 0x74, 0x48, 0x5c, 0xd3, 0x3f, 0x62, 0x95, 0x58, 0x8b, 0xd2, 0x54, 0x1a, 0xbb,
	0x89, 0x9c, 0xc4, 0x23, 0x11, 0x49, 0x6c, 0x25, 0x0e, 0xa8, 0x2f, 0xb5, 0x07, 0xd8, 0xd3, 0x4d,
	0x39, 0x09, 0x2b, 0x99, 0xb8, 0xcb, 0xf9, 0x7d, 0x3f, 0x7d, 0xb6, 0xec, 0x18, 0xc0, 0x91, 0x7e,
	0x34, 0x54, 0xb1, 0xd4, 0x92, 0xd6, 0x7f, 0xf1, 0x07, 0x91, 0x7c, 0xfc, 0x5d, 0x83, 0xda, 0x54,
	0xfa, 0x11, 0xfd, 0x04, 0x35, 0xbd, 0x55, 0x82, 0x55, 0xfa, 0x95, 0xc1, 0xe1, 0xb8, 0x3b, 0xc4,
	0x78, 0x98, 0x45, 0xe6, 0x56, 0x09, 0x03, 0x43, 0xfa, 0x1e, 0x9a, 0xbe, 0x23, 0x23, 0x2b, 0x8d,
	0x03, 0x56, 0xed, 0x57, 0x06, 0x2d, 0x63, 0x3f, 0x9b, 0x37, 0x71, 0x40, 0x29, 0xd4, 0x22, 0x1e,
	0x0a, 0xb6, 0x87, 0x18, 0xbf, 0xe9, 0x31, 0x34, 0x92, 0x6d, 0x68, 0xcb, 0x80, 0xd5, 0x90, 0x16,
	0x53, 0xe6, 0xc6, 0x3c, 0x7a, 0x60, 0xf5, 0x7e, 0x65, 0xb0, 0x67, 0xe0, 0x37, 0x3d, 0x82, 0xba,
	0x8a, 0x7d, 0x47, 0xb0, 0x06, 0xc2, 0x7c, 0xc8, 0x1a, 0x1e, 0x65, 0x90, 0x86, 0x82, 0xed, 0xf7,
	0x2b, 0x83, 0xaa, 0x51, 0x4c, 0xf4, 0x03, 0x40, 0xc8, 0xe3, 0x07, 0xa1, 0x2d, 0x87, 0x2b, 0xd6,
	0xc4, 0xac, 0x95, 0x93, 0x29, 0x57, 0xf4, 0x33, 0x10, 0xfe, 0xc8, 0xfd, 0x80, 0xdb, 0x81, 0xb0,
	0x92, 0x54, 0xa9, 0x60, 0xcb, 0x5a, 0xd8, 0xdb, 0xfd, 0xc7, 0xd7, 0x88, 0xe9, 0x29, 0x74, 0xb4,
	0xd4, 0x3c, 0x78, 0xd6, 0x00, 0xb5, 0x36, 0xb2, 0x42, 0x39, 0x83, 0x9e, 0x12, 0xb1, 0x23, 0x22,
	0x6d, 0x39, 0x1e, 0x8f, 0xee, 0x85, 0x75, 0xee, 0xb1, 0x36, 0xae, 0xd9, 0x2d, 0x82, 0x29, 0xf2,
	0x73, 0x8f, 0x7e, 0x01, 0xfa, 0x9f, 0x3b, 0xbe, 0xf0, 0x58, 0x07, 0x65, 0x52, 0x92, 0xc7, 0x17,
	0xde, 0x2b, 0xcd, 0x97, 0x2e, 0x3b, 0x78, 0xa5, 0xf9, 0xd2, 0xa5, 0x7d, 0x68, 0xbb, 0x22, 0x71,
	0x62, 0x5f, 0x69, 0x5f, 0x46, 0xec, 0x10, 0x4f, 0xf4, 0x25, 0xa2, 0x27, 0xd0, 0x7e, 0x12, 0x76,
	0xe2, 0x6b, 0x81, 0x17, 0xd4, 0x45, 0x03, 0x0a, 0x94, 0xdd, 0xd1, 0x09, 0xb4, 0xf5, 0x93, 0xaf,
	0xb5, 0x88, 0x51, 0x20, 0xb9, 0x50, 0xa0, 0x4c, 0x38, 0x85, 0x4e, 0xc0, 0x13, 0x6d, 0xa5, 0xca,
	0xe5, 0x5a, 0xb8, 0xac, 0x97, 0x1f, 0x46, 0xc6, 0x36, 0x39, 0x3a, 0xfb, 0x53, 0x85, 0xe6, 0xf3,
	0x5f, 0x41, 0xdf, 0x42, 0x77, 0xba, 0x5a, 0x2c, 0x2d, 0xf3, 0xee, 0x76, 0x6e, 0x6d, 0x96, 0xeb,
	0xb9, 0x49, 0xde, 0xd0, 0x77, 0xd0, 0xdb, 0xc1, 0xc9, 0xc2, 0xcc, 0x06, 0x52, 0xa1, 0xc7, 0x40,
	0x77, 0x78, 0x6e, 0x7e, 0x9b, 0x1b, 0xf3, 0xcd, 0x77, 0x52, 0xa5, 0x47, 0x40, 0x76, 0xdc, 0xc4,
	0x80, 0xec, 0x95, 0x4b, 0x36, 0xeb, 0x19, 0x96, 0xd4, 0x68, 0x0f, 0x0e, 0x76, 0xf8, 0x87, 0x71,
	0x4b, 0xea, 0x65, 0x34, 0x59, 0x4e, 0x48, 0x83, 0x52, 0x38, 0x7c, 0x81, 0x36, 0xeb, 0x19, 0xd9,
	0x2f, 0x2f, 0x3f, 0x5b, 0x5d, 0xcf, 0xb1, 0xb1, 0x59, 0x5e, 0x68, 0x7a, 0x65, 0xcc, 0xae, 0x96,
	0x2b, 0xd2, 0x2a, 0xe3, 0xdb, 0xd5, 0xcd, 0xdd, 0xf5, 0x6a, 0x49, 0xa0, 0xdc, 0x72, 0xb3, 0x30,
	0xf3, 0x96, 0x76, 0x79, 0x13, 0xb3, 0xab, 0x05, 0xe9, 0x94, 0x37, 0x61, 0x1a, 0xab, 0x25, 0x39,
	0x98, 0x5c, 0xfc, 0x1c, 0xdf, 0xfb, 0xda, 0x4b, 0xed, 0xa1, 0x23, 0xc3, 0x91, 0xcd, 0xb5, 0xe3,
	0x39, 0x32, 0x56, 0xa3, 0xc4, 0xf1, 0x44, 0xc8, 0x93, 0x91, 0x9d, 0xfa, 0x81, 0x3b, 0xba, 0x97,
	0x23, 0xf1, 0x28, 0x22, 0x9d, 0x8c, 0xf0, 0x11, 0xda, 0x0d, 0x7c, 0xb1, 0x5f, 0xff, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x6d, 0x9f, 0x61, 0x00, 0xbf, 0x03, 0x00, 0x00,
}
