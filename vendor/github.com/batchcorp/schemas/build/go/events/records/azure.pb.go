// Code generated by protoc-gen-go. DO NOT EDIT.
// source: events/records/azure.proto

package records

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// See: https://github.com/Azure/azure-service-bus-go/blob/78c960db000c65f4e32d01371b496d5b33f59c38/message.go#L40
type AzureSinkRecord struct {
	ContentType          string                 `protobuf:"bytes,1,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	CorrelationId        string                 `protobuf:"bytes,2,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Data                 []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	DeliveryCount        uint32                 `protobuf:"varint,4,opt,name=delivery_count,json=deliveryCount,proto3" json:"delivery_count,omitempty"`
	SessionId            string                 `protobuf:"bytes,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	GroupSequence        uint32                 `protobuf:"varint,6,opt,name=group_sequence,json=groupSequence,proto3" json:"group_sequence,omitempty"`
	Id                   string                 `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	Label                string                 `protobuf:"bytes,8,opt,name=label,proto3" json:"label,omitempty"`
	ReplyTo              string                 `protobuf:"bytes,9,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	ReplyToGroupId       string                 `protobuf:"bytes,10,opt,name=reply_to_group_id,json=replyToGroupId,proto3" json:"reply_to_group_id,omitempty"`
	To                   string                 `protobuf:"bytes,11,opt,name=to,proto3" json:"to,omitempty"`
	Ttl                  int64                  `protobuf:"varint,12,opt,name=ttl,proto3" json:"ttl,omitempty"`
	LockToken            string                 `protobuf:"bytes,13,opt,name=lock_token,json=lockToken,proto3" json:"lock_token,omitempty"`
	SystemProperties     *AzureSystemProperties `protobuf:"bytes,14,opt,name=system_properties,json=systemProperties,proto3" json:"system_properties,omitempty"`
	UserProperties       map[string]string      `protobuf:"bytes,15,rep,name=user_properties,json=userProperties,proto3" json:"user_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Format               uint32                 `protobuf:"varint,16,opt,name=format,proto3" json:"format,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *AzureSinkRecord) Reset()         { *m = AzureSinkRecord{} }
func (m *AzureSinkRecord) String() string { return proto.CompactTextString(m) }
func (*AzureSinkRecord) ProtoMessage()    {}
func (*AzureSinkRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c391c59011e1008, []int{0}
}

func (m *AzureSinkRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AzureSinkRecord.Unmarshal(m, b)
}
func (m *AzureSinkRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AzureSinkRecord.Marshal(b, m, deterministic)
}
func (m *AzureSinkRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureSinkRecord.Merge(m, src)
}
func (m *AzureSinkRecord) XXX_Size() int {
	return xxx_messageInfo_AzureSinkRecord.Size(m)
}
func (m *AzureSinkRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureSinkRecord.DiscardUnknown(m)
}

var xxx_messageInfo_AzureSinkRecord proto.InternalMessageInfo

func (m *AzureSinkRecord) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *AzureSinkRecord) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *AzureSinkRecord) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AzureSinkRecord) GetDeliveryCount() uint32 {
	if m != nil {
		return m.DeliveryCount
	}
	return 0
}

func (m *AzureSinkRecord) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *AzureSinkRecord) GetGroupSequence() uint32 {
	if m != nil {
		return m.GroupSequence
	}
	return 0
}

func (m *AzureSinkRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AzureSinkRecord) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *AzureSinkRecord) GetReplyTo() string {
	if m != nil {
		return m.ReplyTo
	}
	return ""
}

func (m *AzureSinkRecord) GetReplyToGroupId() string {
	if m != nil {
		return m.ReplyToGroupId
	}
	return ""
}

func (m *AzureSinkRecord) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *AzureSinkRecord) GetTtl() int64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *AzureSinkRecord) GetLockToken() string {
	if m != nil {
		return m.LockToken
	}
	return ""
}

func (m *AzureSinkRecord) GetSystemProperties() *AzureSystemProperties {
	if m != nil {
		return m.SystemProperties
	}
	return nil
}

func (m *AzureSinkRecord) GetUserProperties() map[string]string {
	if m != nil {
		return m.UserProperties
	}
	return nil
}

func (m *AzureSinkRecord) GetFormat() uint32 {
	if m != nil {
		return m.Format
	}
	return 0
}

type AzureSystemProperties struct {
	LockedUntil            int64             `protobuf:"varint,1,opt,name=locked_until,json=lockedUntil,proto3" json:"locked_until,omitempty"`
	SequenceNumber         int64             `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	PartitionId            int32             `protobuf:"varint,3,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	PartitionKey           string            `protobuf:"bytes,4,opt,name=partition_key,json=partitionKey,proto3" json:"partition_key,omitempty"`
	EnqueuedTime           int64             `protobuf:"varint,5,opt,name=enqueued_time,json=enqueuedTime,proto3" json:"enqueued_time,omitempty"`
	DeadLetterSource       string            `protobuf:"bytes,6,opt,name=dead_letter_source,json=deadLetterSource,proto3" json:"dead_letter_source,omitempty"`
	ScheduledEnqueueTime   int64             `protobuf:"varint,7,opt,name=scheduled_enqueue_time,json=scheduledEnqueueTime,proto3" json:"scheduled_enqueue_time,omitempty"`
	EnqueuedSequenceNumber int64             `protobuf:"varint,8,opt,name=enqueued_sequence_number,json=enqueuedSequenceNumber,proto3" json:"enqueued_sequence_number,omitempty"`
	ViaPartitionKey        string            `protobuf:"bytes,9,opt,name=via_partition_key,json=viaPartitionKey,proto3" json:"via_partition_key,omitempty"`
	Annotations            map[string]string `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral   struct{}          `json:"-"`
	XXX_unrecognized       []byte            `json:"-"`
	XXX_sizecache          int32             `json:"-"`
}

func (m *AzureSystemProperties) Reset()         { *m = AzureSystemProperties{} }
func (m *AzureSystemProperties) String() string { return proto.CompactTextString(m) }
func (*AzureSystemProperties) ProtoMessage()    {}
func (*AzureSystemProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c391c59011e1008, []int{1}
}

func (m *AzureSystemProperties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AzureSystemProperties.Unmarshal(m, b)
}
func (m *AzureSystemProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AzureSystemProperties.Marshal(b, m, deterministic)
}
func (m *AzureSystemProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureSystemProperties.Merge(m, src)
}
func (m *AzureSystemProperties) XXX_Size() int {
	return xxx_messageInfo_AzureSystemProperties.Size(m)
}
func (m *AzureSystemProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureSystemProperties.DiscardUnknown(m)
}

var xxx_messageInfo_AzureSystemProperties proto.InternalMessageInfo

func (m *AzureSystemProperties) GetLockedUntil() int64 {
	if m != nil {
		return m.LockedUntil
	}
	return 0
}

func (m *AzureSystemProperties) GetSequenceNumber() int64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *AzureSystemProperties) GetPartitionId() int32 {
	if m != nil {
		return m.PartitionId
	}
	return 0
}

func (m *AzureSystemProperties) GetPartitionKey() string {
	if m != nil {
		return m.PartitionKey
	}
	return ""
}

func (m *AzureSystemProperties) GetEnqueuedTime() int64 {
	if m != nil {
		return m.EnqueuedTime
	}
	return 0
}

func (m *AzureSystemProperties) GetDeadLetterSource() string {
	if m != nil {
		return m.DeadLetterSource
	}
	return ""
}

func (m *AzureSystemProperties) GetScheduledEnqueueTime() int64 {
	if m != nil {
		return m.ScheduledEnqueueTime
	}
	return 0
}

func (m *AzureSystemProperties) GetEnqueuedSequenceNumber() int64 {
	if m != nil {
		return m.EnqueuedSequenceNumber
	}
	return 0
}

func (m *AzureSystemProperties) GetViaPartitionKey() string {
	if m != nil {
		return m.ViaPartitionKey
	}
	return ""
}

func (m *AzureSystemProperties) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func init() {
	proto.RegisterType((*AzureSinkRecord)(nil), "records.AzureSinkRecord")
	proto.RegisterMapType((map[string]string)(nil), "records.AzureSinkRecord.UserPropertiesEntry")
	proto.RegisterType((*AzureSystemProperties)(nil), "records.AzureSystemProperties")
	proto.RegisterMapType((map[string]string)(nil), "records.AzureSystemProperties.AnnotationsEntry")
}

func init() { proto.RegisterFile("events/records/azure.proto", fileDescriptor_5c391c59011e1008) }

var fileDescriptor_5c391c59011e1008 = []byte{
	// 687 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x5b, 0x6b, 0x1b, 0x39,
	0x14, 0xc7, 0xf1, 0x2d, 0x8e, 0xe5, 0x6b, 0xb4, 0xd9, 0xac, 0x36, 0xb0, 0x8b, 0x37, 0x4b, 0xa9,
	0x5b, 0xc2, 0x0c, 0xa4, 0x79, 0x08, 0x7d, 0x28, 0xa4, 0x25, 0x14, 0x93, 0xd2, 0xa6, 0x63, 0xe7,
	0xa5, 0x2f, 0x62, 0x3c, 0x3a, 0x8d, 0x85, 0xc7, 0xa3, 0x89, 0x2e, 0x86, 0xe9, 0x27, 0xe8, 0x97,
	0xe9, 0x77, 0x2c, 0xd2, 0xcc, 0xf8, 0x46, 0x28, 0xf4, 0x6d, 0xf4, 0x3b, 0xe7, 0xfc, 0xa5, 0x73,
	0xf4, 0x1f, 0xa1, 0x53, 0x58, 0x41, 0xa2, 0x95, 0x2f, 0x21, 0x12, 0x92, 0x29, 0x3f, 0xfc, 0x66,
	0x24, 0x78, 0xa9, 0x14, 0x5a, 0xe0, 0x66, 0x01, 0xcf, 0xbe, 0x37, 0x50, 0xff, 0xda, 0x06, 0x26,
	0x3c, 0x59, 0x04, 0x0e, 0xe2, 0xff, 0x50, 0x27, 0x12, 0x89, 0x86, 0x44, 0x53, 0x9d, 0xa5, 0x40,
	0x2a, 0xc3, 0xca, 0xa8, 0x15, 0xb4, 0x0b, 0x36, 0xcd, 0x52, 0xc0, 0xcf, 0x50, 0x2f, 0x12, 0x52,
	0x42, 0x1c, 0x6a, 0x2e, 0x12, 0xca, 0x19, 0xa9, 0xba, 0xa4, 0xee, 0x16, 0x1d, 0x33, 0x8c, 0x51,
	0x9d, 0x85, 0x3a, 0x24, 0xb5, 0x61, 0x65, 0xd4, 0x09, 0xdc, 0xb7, 0x2d, 0x65, 0x10, 0xf3, 0x15,
	0xc8, 0x8c, 0x46, 0xc2, 0x24, 0x9a, 0xd4, 0x87, 0x95, 0x51, 0x37, 0xe8, 0x96, 0xf4, 0x9d, 0x85,
	0xf8, 0x1f, 0x84, 0x14, 0x28, 0x55, 0xa8, 0x37, 0x9c, 0x7a, 0xab, 0x20, 0x63, 0x66, 0x55, 0x1e,
	0xa4, 0x30, 0x29, 0x55, 0xf0, 0x68, 0x20, 0x89, 0x80, 0x1c, 0xe4, 0x2a, 0x8e, 0x4e, 0x0a, 0x88,
	0x7b, 0xa8, 0xca, 0x19, 0x69, 0xba, 0xea, 0x2a, 0x67, 0xf8, 0x18, 0x35, 0xe2, 0x70, 0x06, 0x31,
	0x39, 0x74, 0x28, 0x5f, 0xe0, 0xbf, 0xd1, 0xa1, 0x84, 0x34, 0xce, 0xa8, 0x16, 0xa4, 0xe5, 0x02,
	0x4d, 0xb7, 0x9e, 0x0a, 0xfc, 0x02, 0x1d, 0x95, 0x21, 0x9a, 0x6f, 0xc8, 0x19, 0x41, 0x2e, 0xa7,
	0x57, 0xe4, 0xbc, 0xb7, 0x78, 0xcc, 0xec, 0x5e, 0x5a, 0x90, 0x76, 0xbe, 0x97, 0x16, 0x78, 0x80,
	0x6a, 0x5a, 0xc7, 0xa4, 0x33, 0xac, 0x8c, 0x6a, 0x81, 0xfd, 0xb4, 0x3d, 0xc5, 0x22, 0x5a, 0x50,
	0x2d, 0x16, 0x90, 0x90, 0x6e, 0xde, 0x93, 0x25, 0x53, 0x0b, 0xf0, 0x2d, 0x3a, 0x52, 0x99, 0xd2,
	0xb0, 0xa4, 0xa9, 0x14, 0x29, 0x48, 0xcd, 0x41, 0x91, 0xde, 0xb0, 0x32, 0x6a, 0x5f, 0xfc, 0xeb,
	0x15, 0x17, 0xe6, 0xe5, 0x97, 0xe5, 0xd2, 0xee, 0xd6, 0x59, 0xc1, 0x40, 0xed, 0x11, 0x7c, 0x8f,
	0xfa, 0x46, 0x81, 0xdc, 0x96, 0xea, 0x0f, 0x6b, 0xa3, 0xf6, 0xc5, 0xf9, 0x9e, 0xd4, 0xfa, 0xde,
	0xbd, 0x7b, 0x05, 0x72, 0xa3, 0x70, 0x93, 0x68, 0x99, 0x05, 0x3d, 0xb3, 0x03, 0xf1, 0x09, 0x3a,
	0xf8, 0x2a, 0xe4, 0x32, 0xd4, 0x64, 0xe0, 0xe6, 0x5d, 0xac, 0x4e, 0xaf, 0xd1, 0x1f, 0x4f, 0x94,
	0xdb, 0x19, 0x2c, 0x20, 0x2b, 0x1c, 0x64, 0x3f, 0xed, 0x0d, 0xac, 0xc2, 0xd8, 0x40, 0x61, 0x98,
	0x7c, 0xf1, 0xba, 0x7a, 0x55, 0x39, 0xfb, 0x51, 0x47, 0x7f, 0x3e, 0xd9, 0x9d, 0x35, 0xa4, 0x9d,
	0x12, 0x30, 0x6a, 0x12, 0xcd, 0x63, 0x27, 0x57, 0x0b, 0xda, 0x39, 0xbb, 0xb7, 0x08, 0x3f, 0x47,
	0xfd, 0xd2, 0x09, 0x34, 0x31, 0xcb, 0x19, 0x48, 0xb7, 0x41, 0x2d, 0xe8, 0x95, 0xf8, 0xa3, 0xa3,
	0x56, 0x2b, 0x0d, 0xa5, 0xe6, 0xa5, 0x6f, 0xad, 0x35, 0x1b, 0x41, 0x7b, 0xcd, 0xc6, 0x0c, 0xff,
	0x8f, 0xba, 0x9b, 0x14, 0x7b, 0xfc, 0xba, 0x3b, 0xea, 0xa6, 0xee, 0x16, 0x32, 0x9b, 0x04, 0xc9,
	0xa3, 0x01, 0x03, 0x8c, 0x6a, 0xbe, 0x04, 0x67, 0xd1, 0x5a, 0xd0, 0x29, 0xe1, 0x94, 0x2f, 0x01,
	0x9f, 0x23, 0xcc, 0x20, 0x64, 0x34, 0x06, 0xad, 0x41, 0x52, 0x25, 0x8c, 0x2c, 0x9c, 0xda, 0x0a,
	0x06, 0x36, 0xf2, 0xc1, 0x05, 0x26, 0x8e, 0xe3, 0x4b, 0x74, 0xa2, 0xa2, 0x39, 0x30, 0x13, 0x03,
	0xa3, 0x85, 0x4e, 0xae, 0xdd, 0x74, 0xda, 0xc7, 0xeb, 0xe8, 0x4d, 0x1e, 0x74, 0x7b, 0x5c, 0x21,
	0xb2, 0x3e, 0xc8, 0xfe, 0x08, 0x0e, 0x5d, 0xdd, 0x49, 0x19, 0x9f, 0xec, 0x8e, 0xe2, 0x25, 0x3a,
	0x5a, 0xf1, 0x90, 0xee, 0xf6, 0x9a, 0xfb, 0xbf, 0xbf, 0xe2, 0xe1, 0xdd, 0x76, 0xbb, 0x9f, 0x51,
	0x3b, 0x4c, 0x12, 0xa1, 0xdd, 0x9f, 0xad, 0x08, 0x72, 0x56, 0xf2, 0x7f, 0xed, 0x4a, 0xef, 0x7a,
	0x53, 0x91, 0xbb, 0x69, 0x5b, 0xe3, 0xf4, 0x0d, 0x1a, 0xec, 0x27, 0xfc, 0x8e, 0x5f, 0xde, 0x7e,
	0x42, 0x7f, 0xa9, 0xb9, 0x37, 0x0b, 0x75, 0x34, 0xf7, 0xf2, 0xa7, 0xae, 0x3c, 0xce, 0x97, 0xcb,
	0x07, 0xae, 0xe7, 0x66, 0xe6, 0x45, 0x62, 0xe9, 0xbb, 0x84, 0x48, 0xc8, 0xd4, 0xb7, 0xe3, 0x5b,
	0x86, 0xca, 0x9f, 0x19, 0x1e, 0x33, 0xff, 0x41, 0xf8, 0xbb, 0x0f, 0xe4, 0xec, 0xc0, 0xbd, 0x8d,
	0xaf, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xef, 0x72, 0xb3, 0x39, 0x05, 0x00, 0x00,
}
