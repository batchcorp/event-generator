// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tunnel.proto

package events

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Tunnel_Type int32

const (
	Tunnel_UNSET Tunnel_Type = 0
	// Sent by plumber to dProxy
	Tunnel_AUTH_REQUEST Tunnel_Type = 1
	// Sent by dProxy to plumber
	Tunnel_AUTH_RESPONSE Tunnel_Type = 2
	// Sent by dProxy to plumber
	// Contains an events.Outbound message with a replay payload
	Tunnel_OUTBOUND_MESSAGE Tunnel_Type = 3
	// Sent by dProxy to plumber
	// Replicates an ISB replay event message for display in plumber logs
	Tunnel_REPLAY_EVENT Tunnel_Type = 4
)

var Tunnel_Type_name = map[int32]string{
	0: "UNSET",
	1: "AUTH_REQUEST",
	2: "AUTH_RESPONSE",
	3: "OUTBOUND_MESSAGE",
	4: "REPLAY_EVENT",
}

var Tunnel_Type_value = map[string]int32{
	"UNSET":            0,
	"AUTH_REQUEST":     1,
	"AUTH_RESPONSE":    2,
	"OUTBOUND_MESSAGE": 3,
	"REPLAY_EVENT":     4,
}

func (x Tunnel_Type) String() string {
	return proto.EnumName(Tunnel_Type_name, int32(x))
}

func (Tunnel_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6f51ddaa7891a711, []int{0, 0}
}

type ReplayEvent_Type int32

const (
	ReplayEvent_UNSET         ReplayEvent_Type = 0
	ReplayEvent_CREATE_REPLAY ReplayEvent_Type = 1
	ReplayEvent_PAUSE_REPLAY  ReplayEvent_Type = 2
	ReplayEvent_RESUME_REPLAY ReplayEvent_Type = 3
	ReplayEvent_ABORT_REPLAY  ReplayEvent_Type = 4
	ReplayEvent_FINISH_REPLAY ReplayEvent_Type = 5
)

var ReplayEvent_Type_name = map[int32]string{
	0: "UNSET",
	1: "CREATE_REPLAY",
	2: "PAUSE_REPLAY",
	3: "RESUME_REPLAY",
	4: "ABORT_REPLAY",
	5: "FINISH_REPLAY",
}

var ReplayEvent_Type_value = map[string]int32{
	"UNSET":         0,
	"CREATE_REPLAY": 1,
	"PAUSE_REPLAY":  2,
	"RESUME_REPLAY": 3,
	"ABORT_REPLAY":  4,
	"FINISH_REPLAY": 5,
}

func (x ReplayEvent_Type) String() string {
	return proto.EnumName(ReplayEvent_Type_name, int32(x))
}

func (ReplayEvent_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6f51ddaa7891a711, []int{3, 0}
}

// Tunnel is an envelope message for tunnel communication between dproxy and plumber
type Tunnel struct {
	Type     Tunnel_Type `protobuf:"varint,1,opt,name=type,proto3,enum=events.Tunnel_Type" json:"type,omitempty"`
	ReplayId string      `protobuf:"bytes,2,opt,name=replay_id,json=replayId,proto3" json:"replay_id,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*Tunnel_AuthRequest
	//	*Tunnel_AuthResponse
	//	*Tunnel_OutboundMessage
	//	*Tunnel_ReplayMessage
	Payload              isTunnel_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Tunnel) Reset()         { *m = Tunnel{} }
func (m *Tunnel) String() string { return proto.CompactTextString(m) }
func (*Tunnel) ProtoMessage()    {}
func (*Tunnel) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f51ddaa7891a711, []int{0}
}

func (m *Tunnel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tunnel.Unmarshal(m, b)
}
func (m *Tunnel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tunnel.Marshal(b, m, deterministic)
}
func (m *Tunnel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tunnel.Merge(m, src)
}
func (m *Tunnel) XXX_Size() int {
	return xxx_messageInfo_Tunnel.Size(m)
}
func (m *Tunnel) XXX_DiscardUnknown() {
	xxx_messageInfo_Tunnel.DiscardUnknown(m)
}

var xxx_messageInfo_Tunnel proto.InternalMessageInfo

func (m *Tunnel) GetType() Tunnel_Type {
	if m != nil {
		return m.Type
	}
	return Tunnel_UNSET
}

func (m *Tunnel) GetReplayId() string {
	if m != nil {
		return m.ReplayId
	}
	return ""
}

type isTunnel_Payload interface {
	isTunnel_Payload()
}

type Tunnel_AuthRequest struct {
	AuthRequest *AuthRequest `protobuf:"bytes,100,opt,name=auth_request,json=authRequest,proto3,oneof"`
}

type Tunnel_AuthResponse struct {
	AuthResponse *AuthResponse `protobuf:"bytes,101,opt,name=auth_response,json=authResponse,proto3,oneof"`
}

type Tunnel_OutboundMessage struct {
	OutboundMessage *Outbound `protobuf:"bytes,102,opt,name=outbound_message,json=outboundMessage,proto3,oneof"`
}

type Tunnel_ReplayMessage struct {
	ReplayMessage *ReplayEvent `protobuf:"bytes,103,opt,name=replay_message,json=replayMessage,proto3,oneof"`
}

func (*Tunnel_AuthRequest) isTunnel_Payload() {}

func (*Tunnel_AuthResponse) isTunnel_Payload() {}

func (*Tunnel_OutboundMessage) isTunnel_Payload() {}

func (*Tunnel_ReplayMessage) isTunnel_Payload() {}

func (m *Tunnel) GetPayload() isTunnel_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Tunnel) GetAuthRequest() *AuthRequest {
	if x, ok := m.GetPayload().(*Tunnel_AuthRequest); ok {
		return x.AuthRequest
	}
	return nil
}

func (m *Tunnel) GetAuthResponse() *AuthResponse {
	if x, ok := m.GetPayload().(*Tunnel_AuthResponse); ok {
		return x.AuthResponse
	}
	return nil
}

func (m *Tunnel) GetOutboundMessage() *Outbound {
	if x, ok := m.GetPayload().(*Tunnel_OutboundMessage); ok {
		return x.OutboundMessage
	}
	return nil
}

func (m *Tunnel) GetReplayMessage() *ReplayEvent {
	if x, ok := m.GetPayload().(*Tunnel_ReplayMessage); ok {
		return x.ReplayMessage
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Tunnel) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Tunnel_AuthRequest)(nil),
		(*Tunnel_AuthResponse)(nil),
		(*Tunnel_OutboundMessage)(nil),
		(*Tunnel_ReplayMessage)(nil),
	}
}

type AuthRequest struct {
	// API Token generated in https://console.batch.sh
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Message bus type name, ex: kafka, rabbitmq, etc.
	MessageBus string `protobuf:"bytes,2,opt,name=message_bus,json=messageBus,proto3" json:"message_bus,omitempty"`
	// Tunnels can be given a custom name to help identify them in the plumber server.
	// If this value is empty, a default name will be generated based off of message_bus and the
	// connecting IP address
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Plumber server mode needs permanent tunnels without creating multiple
	// destinations in console for all running plumber instances  in a cluster.
	// If cluster ID is specified, we will use that + team ID + connection ID = unique identifier
	// so that we can always reconnect to the same tunnel.
	//
	// Tunnels without this value specified will be created as ephemeral tunnels.
	// Ephemeral tunnels will be deleted after 3 hours of inactivity.
	PlumberClusterId     string   `protobuf:"bytes,4,opt,name=plumber_cluster_id,json=plumberClusterId,proto3" json:"plumber_cluster_id,omitempty"`
	TunnelId             string   `protobuf:"bytes,5,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthRequest) Reset()         { *m = AuthRequest{} }
func (m *AuthRequest) String() string { return proto.CompactTextString(m) }
func (*AuthRequest) ProtoMessage()    {}
func (*AuthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f51ddaa7891a711, []int{1}
}

func (m *AuthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthRequest.Unmarshal(m, b)
}
func (m *AuthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthRequest.Marshal(b, m, deterministic)
}
func (m *AuthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthRequest.Merge(m, src)
}
func (m *AuthRequest) XXX_Size() int {
	return xxx_messageInfo_AuthRequest.Size(m)
}
func (m *AuthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthRequest proto.InternalMessageInfo

func (m *AuthRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *AuthRequest) GetMessageBus() string {
	if m != nil {
		return m.MessageBus
	}
	return ""
}

func (m *AuthRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AuthRequest) GetPlumberClusterId() string {
	if m != nil {
		return m.PlumberClusterId
	}
	return ""
}

func (m *AuthRequest) GetTunnelId() string {
	if m != nil {
		return m.TunnelId
	}
	return ""
}

type AuthResponse struct {
	// Whether or not the connection is authorized
	Authorized bool `protobuf:"varint,1,opt,name=authorized,proto3" json:"authorized,omitempty"`
	// Error message if any
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthResponse) Reset()         { *m = AuthResponse{} }
func (m *AuthResponse) String() string { return proto.CompactTextString(m) }
func (*AuthResponse) ProtoMessage()    {}
func (*AuthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f51ddaa7891a711, []int{2}
}

func (m *AuthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthResponse.Unmarshal(m, b)
}
func (m *AuthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthResponse.Marshal(b, m, deterministic)
}
func (m *AuthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthResponse.Merge(m, src)
}
func (m *AuthResponse) XXX_Size() int {
	return xxx_messageInfo_AuthResponse.Size(m)
}
func (m *AuthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthResponse proto.InternalMessageInfo

func (m *AuthResponse) GetAuthorized() bool {
	if m != nil {
		return m.Authorized
	}
	return false
}

func (m *AuthResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReplayEvent struct {
	Type                 ReplayEvent_Type `protobuf:"varint,1,opt,name=type,proto3,enum=events.ReplayEvent_Type" json:"type,omitempty"`
	ReplayId             string           `protobuf:"bytes,2,opt,name=replay_id,json=replayId,proto3" json:"replay_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ReplayEvent) Reset()         { *m = ReplayEvent{} }
func (m *ReplayEvent) String() string { return proto.CompactTextString(m) }
func (*ReplayEvent) ProtoMessage()    {}
func (*ReplayEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f51ddaa7891a711, []int{3}
}

func (m *ReplayEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplayEvent.Unmarshal(m, b)
}
func (m *ReplayEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplayEvent.Marshal(b, m, deterministic)
}
func (m *ReplayEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplayEvent.Merge(m, src)
}
func (m *ReplayEvent) XXX_Size() int {
	return xxx_messageInfo_ReplayEvent.Size(m)
}
func (m *ReplayEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplayEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ReplayEvent proto.InternalMessageInfo

func (m *ReplayEvent) GetType() ReplayEvent_Type {
	if m != nil {
		return m.Type
	}
	return ReplayEvent_UNSET
}

func (m *ReplayEvent) GetReplayId() string {
	if m != nil {
		return m.ReplayId
	}
	return ""
}

func init() {
	proto.RegisterEnum("events.Tunnel_Type", Tunnel_Type_name, Tunnel_Type_value)
	proto.RegisterEnum("events.ReplayEvent_Type", ReplayEvent_Type_name, ReplayEvent_Type_value)
	proto.RegisterType((*Tunnel)(nil), "events.Tunnel")
	proto.RegisterType((*AuthRequest)(nil), "events.AuthRequest")
	proto.RegisterType((*AuthResponse)(nil), "events.AuthResponse")
	proto.RegisterType((*ReplayEvent)(nil), "events.ReplayEvent")
}

func init() { proto.RegisterFile("tunnel.proto", fileDescriptor_6f51ddaa7891a711) }

var fileDescriptor_6f51ddaa7891a711 = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0x8e, 0xdb, 0xa4, 0x6d, 0x4e, 0x92, 0xfe, 0xee, 0xfc, 0x5d, 0x58, 0x20, 0x41, 0x95, 0x0d,
	0x5d, 0x14, 0x47, 0x82, 0x0d, 0x12, 0x74, 0xe1, 0x94, 0x01, 0x47, 0xa2, 0x49, 0x18, 0xdb, 0x48,
	0xb0, 0xc0, 0xf2, 0x65, 0x88, 0x23, 0x1c, 0x8f, 0xf1, 0xcc, 0x54, 0x0a, 0xaf, 0xc3, 0x9a, 0xf7,
	0xe0, 0xb1, 0x90, 0x67, 0xec, 0x36, 0x15, 0x2c, 0xd8, 0xe5, 0xbb, 0x45, 0x73, 0xce, 0x77, 0x0c,
	0x43, 0x21, 0x8b, 0x82, 0xe6, 0x76, 0x59, 0x31, 0xc1, 0xd0, 0x01, 0xbd, 0xa1, 0x85, 0xe0, 0x0f,
	0x8e, 0x99, 0x14, 0x31, 0x93, 0x45, 0xaa, 0xf9, 0xf1, 0xcf, 0x7d, 0x38, 0xf0, 0x95, 0x11, 0x3d,
	0x81, 0xae, 0xd8, 0x96, 0xd4, 0x32, 0xce, 0x8c, 0xf3, 0xe3, 0x67, 0xff, 0xdb, 0x3a, 0x61, 0x6b,
	0xd5, 0xf6, 0xb7, 0x25, 0x25, 0xca, 0x80, 0x1e, 0x42, 0xbf, 0xa2, 0x65, 0x1e, 0x6d, 0xc3, 0x75,
	0x6a, 0xed, 0x9d, 0x19, 0xe7, 0x7d, 0x72, 0xa4, 0x89, 0x59, 0x8a, 0x5e, 0xc0, 0x30, 0x92, 0x22,
	0x0b, 0x2b, 0xfa, 0x4d, 0x52, 0x2e, 0xac, 0xf4, 0xcc, 0x38, 0x1f, 0xdc, 0xfd, 0x9b, 0x23, 0x45,
	0x46, 0xb4, 0xe4, 0x76, 0xc8, 0x20, 0xba, 0x83, 0xe8, 0x25, 0x8c, 0x9a, 0x24, 0x2f, 0x59, 0xc1,
	0xa9, 0x45, 0x55, 0xf4, 0xf4, 0x7e, 0x54, 0x6b, 0x6e, 0x87, 0x0c, 0xa3, 0x1d, 0x8c, 0x2e, 0xc1,
	0x6c, 0x27, 0x0b, 0x37, 0x94, 0xf3, 0x68, 0x45, 0xad, 0x2f, 0x2a, 0x6f, 0xb6, 0xf9, 0x45, 0xa3,
	0xbb, 0x1d, 0xf2, 0x5f, 0xeb, 0xbd, 0xd6, 0x56, 0xf4, 0x0a, 0x8e, 0x9b, 0x91, 0xda, 0xf0, 0xea,
	0xfe, 0xbb, 0x89, 0x52, 0x71, 0x0d, 0xdc, 0x0e, 0x19, 0x69, 0x73, 0x93, 0x1e, 0x7f, 0x86, 0x6e,
	0xbd, 0x1e, 0xd4, 0x87, 0x5e, 0x30, 0xf7, 0xb0, 0x6f, 0x76, 0x90, 0x09, 0x43, 0x27, 0xf0, 0xdd,
	0x90, 0xe0, 0xf7, 0x01, 0xf6, 0x7c, 0xd3, 0x40, 0x27, 0x30, 0x6a, 0x18, 0x6f, 0xb9, 0x98, 0x7b,
	0xd8, 0xdc, 0x43, 0xa7, 0x60, 0x2e, 0x02, 0x7f, 0xba, 0x08, 0xe6, 0xaf, 0xc3, 0x6b, 0xec, 0x79,
	0xce, 0x5b, 0x6c, 0xee, 0xd7, 0x51, 0x82, 0x97, 0xef, 0x9c, 0x8f, 0x21, 0xfe, 0x80, 0xe7, 0xbe,
	0xd9, 0x9d, 0xf6, 0xe1, 0xb0, 0x8c, 0xb6, 0x39, 0x8b, 0xd2, 0xf1, 0x0f, 0x03, 0x06, 0x3b, 0x3b,
	0x44, 0xa7, 0xd0, 0x13, 0xec, 0x2b, 0x2d, 0x54, 0x6b, 0x7d, 0xa2, 0x01, 0x7a, 0x0c, 0x83, 0x66,
	0x8e, 0x30, 0x96, 0xbc, 0xe9, 0x08, 0x1a, 0x6a, 0x2a, 0x39, 0x42, 0xd0, 0x2d, 0xa2, 0x0d, 0xb5,
	0xf6, 0x95, 0xa2, 0x7e, 0xa3, 0x0b, 0x40, 0x65, 0x2e, 0x37, 0x31, 0xad, 0xc2, 0x24, 0x97, 0x5c,
	0xd0, 0xaa, 0xee, 0xb7, 0xab, 0x1c, 0x66, 0xa3, 0x5c, 0x69, 0x61, 0x96, 0xd6, 0x47, 0xa0, 0x0f,
	0xac, 0x36, 0xf5, 0xf4, 0x11, 0x68, 0x62, 0x96, 0x8e, 0x5d, 0x18, 0xee, 0xb6, 0x85, 0x1e, 0x01,
	0xd4, 0x6d, 0xb1, 0x6a, 0xfd, 0x9d, 0xa6, 0xea, 0xa9, 0x47, 0x64, 0x87, 0x41, 0x16, 0x1c, 0xb6,
	0x7b, 0xd7, 0x6f, 0x6d, 0xe1, 0xf8, 0x97, 0x01, 0x83, 0x9d, 0xdd, 0xa3, 0x8b, 0x7b, 0x47, 0x6a,
	0xfd, 0xa5, 0x9e, 0x7f, 0xbd, 0xd4, 0x71, 0xf1, 0x67, 0x6b, 0x27, 0x30, 0xba, 0x22, 0xd8, 0xf1,
	0x71, 0xa8, 0x1b, 0x30, 0x8d, 0xba, 0x8d, 0xa5, 0x13, 0x78, 0xb7, 0xcc, 0x5e, 0x6d, 0x22, 0xd8,
	0x0b, 0xae, 0x6f, 0x29, 0x55, 0x99, 0x33, 0x5d, 0x10, 0xbf, 0x65, 0xba, 0xb5, 0xe9, 0xcd, 0x6c,
	0x3e, 0xf3, 0xdc, 0x96, 0xea, 0x4d, 0x7d, 0x38, 0xe1, 0x99, 0x1d, 0x47, 0x22, 0xc9, 0x6c, 0x4e,
	0xab, 0x9b, 0x75, 0x42, 0xf9, 0xd2, 0xf8, 0x74, 0xb9, 0x5a, 0x8b, 0x4c, 0xc6, 0x76, 0xc2, 0x36,
	0x13, 0x25, 0x26, 0xac, 0x2a, 0x27, 0x09, 0xcb, 0x73, 0x9a, 0x08, 0x56, 0x3d, 0xe5, 0x49, 0x46,
	0x37, 0x11, 0x9f, 0xc4, 0x72, 0x9d, 0xa7, 0x93, 0x15, 0x9b, 0xa8, 0x0f, 0x97, 0x4f, 0xf4, 0xe4,
	0xf1, 0x81, 0x82, 0xcf, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xe6, 0x20, 0x76, 0x46, 0xef, 0x03,
	0x00, 0x00,
}
