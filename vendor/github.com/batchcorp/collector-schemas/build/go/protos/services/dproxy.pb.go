// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services/dproxy.proto

package services

import (
	context "context"
	fmt "fmt"
	events "github.com/batchcorp/collector-schemas/build/go/protos/events"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("services/dproxy.proto", fileDescriptor_b975708b01663117) }

var fileDescriptor_b975708b01663117 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8f, 0xbf, 0x4e, 0x03, 0x31,
	0x0c, 0xc6, 0x55, 0x09, 0x15, 0x94, 0x8d, 0x40, 0x97, 0xe3, 0x19, 0x88, 0xf9, 0x33, 0x31, 0x21,
	0xa0, 0x0f, 0x50, 0x75, 0x60, 0x60, 0x41, 0x77, 0x3e, 0xab, 0x39, 0xe9, 0x2e, 0x0e, 0xb1, 0x73,
	0xa2, 0x6f, 0x8f, 0x9a, 0x23, 0x03, 0x12, 0xa3, 0x7f, 0xfe, 0x7e, 0x96, 0x3f, 0xb3, 0x11, 0x4a,
	0xf3, 0x80, 0x24, 0xd0, 0xc7, 0xc4, 0xdf, 0x47, 0x17, 0x13, 0x2b, 0xdb, 0x8b, 0x8a, 0x9b, 0x1b,
	0x9a, 0x29, 0xa8, 0x40, 0x7f, 0x0c, 0xed, 0x34, 0xe0, 0x67, 0xa2, 0x38, 0xb6, 0xbf, 0xb1, 0x87,
	0xd9, 0xac, 0xb7, 0xbb, 0x93, 0x66, 0x9f, 0xcc, 0xf9, 0x1b, 0x87, 0x40, 0xa8, 0x76, 0xe3, 0x16,
	0xc5, 0x6d, 0x17, 0x65, 0x5f, 0x8c, 0xe6, 0x7f, 0x7c, 0xb7, 0xb2, 0xf7, 0xe6, 0xec, 0x25, 0xab,
	0xb7, 0x57, 0x35, 0x70, 0x9a, 0xf6, 0xf4, 0x95, 0x49, 0xb4, 0xb9, 0xfe, 0x0b, 0x25, 0x72, 0x10,
	0x7a, 0x7d, 0x37, 0x97, 0xe2, 0x5d, 0xd7, 0x2a, 0x7a, 0x57, 0x3f, 0xdd, 0xad, 0x3e, 0x9e, 0x0f,
	0x83, 0xfa, 0xdc, 0x39, 0xe4, 0x09, 0xca, 0x12, 0x39, 0x45, 0x40, 0x1e, 0x47, 0x42, 0xe5, 0x74,
	0x2b, 0xe8, 0x69, 0x6a, 0x05, 0xba, 0x3c, 0x8c, 0x3d, 0x1c, 0x18, 0x4a, 0x0b, 0x81, 0x7a, 0xa2,
	0x5b, 0x17, 0xf0, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xf8, 0xe2, 0xa8, 0x16, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DProxyClient is the client API for DProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DProxyClient interface {
	Connect(ctx context.Context, in *events.DynamicReplay, opts ...grpc.CallOption) (DProxy_ConnectClient, error)
	Auth(ctx context.Context, in *events.AuthRequest, opts ...grpc.CallOption) (*events.AuthResponse, error)
}

type dProxyClient struct {
	cc *grpc.ClientConn
}

func NewDProxyClient(cc *grpc.ClientConn) DProxyClient {
	return &dProxyClient{cc}
}

func (c *dProxyClient) Connect(ctx context.Context, in *events.DynamicReplay, opts ...grpc.CallOption) (DProxy_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DProxy_serviceDesc.Streams[0], "/services.DProxy/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &dProxyConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DProxy_ConnectClient interface {
	Recv() (*events.DynamicReplay, error)
	grpc.ClientStream
}

type dProxyConnectClient struct {
	grpc.ClientStream
}

func (x *dProxyConnectClient) Recv() (*events.DynamicReplay, error) {
	m := new(events.DynamicReplay)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dProxyClient) Auth(ctx context.Context, in *events.AuthRequest, opts ...grpc.CallOption) (*events.AuthResponse, error) {
	out := new(events.AuthResponse)
	err := c.cc.Invoke(ctx, "/services.DProxy/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DProxyServer is the server API for DProxy service.
type DProxyServer interface {
	Connect(*events.DynamicReplay, DProxy_ConnectServer) error
	Auth(context.Context, *events.AuthRequest) (*events.AuthResponse, error)
}

// UnimplementedDProxyServer can be embedded to have forward compatible implementations.
type UnimplementedDProxyServer struct {
}

func (*UnimplementedDProxyServer) Connect(req *events.DynamicReplay, srv DProxy_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedDProxyServer) Auth(ctx context.Context, req *events.AuthRequest) (*events.AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}

func RegisterDProxyServer(s *grpc.Server, srv DProxyServer) {
	s.RegisterService(&_DProxy_serviceDesc, srv)
}

func _DProxy_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(events.DynamicReplay)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DProxyServer).Connect(m, &dProxyConnectServer{stream})
}

type DProxy_ConnectServer interface {
	Send(*events.DynamicReplay) error
	grpc.ServerStream
}

type dProxyConnectServer struct {
	grpc.ServerStream
}

func (x *dProxyConnectServer) Send(m *events.DynamicReplay) error {
	return x.ServerStream.SendMsg(m)
}

func _DProxy_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DProxyServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.DProxy/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DProxyServer).Auth(ctx, req.(*events.AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.DProxy",
	HandlerType: (*DProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _DProxy_Auth_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _DProxy_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/dproxy.proto",
}
