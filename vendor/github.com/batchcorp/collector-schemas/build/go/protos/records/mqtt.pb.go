// Code generated by protoc-gen-go. DO NOT EDIT.
// source: records/mqtt.proto

package records

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MQTTRecord struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Topic                string   `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Value                []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Duplicate            bool     `protobuf:"varint,4,opt,name=duplicate,proto3" json:"duplicate,omitempty"`
	Retained             bool     `protobuf:"varint,5,opt,name=retained,proto3" json:"retained,omitempty"`
	Qos                  uint32   `protobuf:"varint,6,opt,name=qos,proto3" json:"qos,omitempty"`
	Timestamp            int64    `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MQTTRecord) Reset()         { *m = MQTTRecord{} }
func (m *MQTTRecord) String() string { return proto.CompactTextString(m) }
func (*MQTTRecord) ProtoMessage()    {}
func (*MQTTRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd95d924c40ff57a, []int{0}
}

func (m *MQTTRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MQTTRecord.Unmarshal(m, b)
}
func (m *MQTTRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MQTTRecord.Marshal(b, m, deterministic)
}
func (m *MQTTRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MQTTRecord.Merge(m, src)
}
func (m *MQTTRecord) XXX_Size() int {
	return xxx_messageInfo_MQTTRecord.Size(m)
}
func (m *MQTTRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MQTTRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MQTTRecord proto.InternalMessageInfo

func (m *MQTTRecord) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MQTTRecord) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *MQTTRecord) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *MQTTRecord) GetDuplicate() bool {
	if m != nil {
		return m.Duplicate
	}
	return false
}

func (m *MQTTRecord) GetRetained() bool {
	if m != nil {
		return m.Retained
	}
	return false
}

func (m *MQTTRecord) GetQos() uint32 {
	if m != nil {
		return m.Qos
	}
	return 0
}

func (m *MQTTRecord) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*MQTTRecord)(nil), "records.MQTTRecord")
}

func init() { proto.RegisterFile("records/mqtt.proto", fileDescriptor_fd95d924c40ff57a) }

var fileDescriptor_fd95d924c40ff57a = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0x3d, 0x4f, 0xf3, 0x30,
	0x10, 0x80, 0xe5, 0xe4, 0xed, 0x97, 0xf5, 0x82, 0x90, 0x85, 0x84, 0x85, 0x18, 0x22, 0xa6, 0x2c,
	0xc4, 0x03, 0x3b, 0x03, 0x3b, 0x03, 0x56, 0x17, 0xd8, 0x1c, 0xfb, 0xd4, 0x58, 0x8a, 0x7b, 0xae,
	0x7d, 0xe9, 0x0f, 0xe3, 0x17, 0xa2, 0xb8, 0x11, 0xdd, 0xee, 0x79, 0xee, 0x4b, 0x77, 0x5c, 0x24,
	0xb0, 0x98, 0x5c, 0x56, 0xe1, 0x44, 0xd4, 0xc5, 0x84, 0x84, 0x62, 0xb3, 0xb8, 0xe7, 0x1f, 0xc6,
	0xf9, 0xc7, 0xe7, 0x7e, 0xaf, 0x0b, 0x8b, 0x5b, 0x5e, 0x79, 0x27, 0x59, 0xc3, 0xda, 0x1b, 0x5d,
	0x79, 0x27, 0xee, 0xf9, 0x8a, 0x30, 0x7a, 0x2b, 0xab, 0x86, 0xb5, 0x3b, 0x7d, 0x81, 0xd9, 0x9e,
	0xcd, 0x38, 0x81, 0xac, 0x1b, 0xd6, 0xfe, 0xd7, 0x17, 0x10, 0x4f, 0x7c, 0xe7, 0xa6, 0x38, 0x7a,
	0x6b, 0x08, 0xe4, 0xbf, 0x86, 0xb5, 0x5b, 0x7d, 0x15, 0xe2, 0x91, 0x6f, 0x13, 0x90, 0xf1, 0x47,
	0x70, 0x72, 0x55, 0x92, 0x7f, 0x2c, 0xee, 0x78, 0x7d, 0xc2, 0x2c, 0xd7, 0x65, 0xed, 0x1c, 0xce,
	0xb3, 0xc8, 0x07, 0xc8, 0x64, 0x42, 0x94, 0x9b, 0x86, 0xb5, 0xb5, 0xbe, 0x8a, 0xf7, 0x2f, 0xfe,
	0x90, 0x87, 0xae, 0x37, 0x64, 0x87, 0x0e, 0xce, 0x70, 0xa4, 0xdc, 0x2d, 0xf7, 0x7c, 0xbf, 0x1d,
	0x3c, 0x0d, 0x53, 0xdf, 0x59, 0x0c, 0xaa, 0x14, 0x58, 0x4c, 0x51, 0x59, 0x1c, 0x47, 0xb0, 0x84,
	0xe9, 0x25, 0xdb, 0x01, 0x82, 0xc9, 0xaa, 0x9f, 0xfc, 0xe8, 0xd4, 0x01, 0x55, 0xf9, 0x47, 0x56,
	0x4b, 0x7f, 0xbf, 0x2e, 0xfc, 0xfa, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x85, 0xde, 0xfb, 0x35,
	0x01, 0x00, 0x00,
}
