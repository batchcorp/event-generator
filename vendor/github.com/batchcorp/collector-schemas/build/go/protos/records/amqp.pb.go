// Code generated by protoc-gen-go. DO NOT EDIT.
// source: records/amqp.proto

package records

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AMQPHeader struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AMQPHeader) Reset()         { *m = AMQPHeader{} }
func (m *AMQPHeader) String() string { return proto.CompactTextString(m) }
func (*AMQPHeader) ProtoMessage()    {}
func (*AMQPHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_67db462f137c19f7, []int{0}
}

func (m *AMQPHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AMQPHeader.Unmarshal(m, b)
}
func (m *AMQPHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AMQPHeader.Marshal(b, m, deterministic)
}
func (m *AMQPHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AMQPHeader.Merge(m, src)
}
func (m *AMQPHeader) XXX_Size() int {
	return xxx_messageInfo_AMQPHeader.Size(m)
}
func (m *AMQPHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_AMQPHeader.DiscardUnknown(m)
}

var xxx_messageInfo_AMQPHeader proto.InternalMessageInfo

func (m *AMQPHeader) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AMQPHeader) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// See: https://godoc.org/github.com/streadway/amqp#Delivery
type AMQPSinkRecord struct {
	Body                 []byte        `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Timestamp            int64         `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type                 string        `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Exchange             string        `protobuf:"bytes,4,opt,name=exchange,proto3" json:"exchange,omitempty"`
	RoutingKey           string        `protobuf:"bytes,5,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty"`
	ContentType          string        `protobuf:"bytes,6,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentEncoding      string        `protobuf:"bytes,7,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
	Priority             int32         `protobuf:"varint,8,opt,name=priority,proto3" json:"priority,omitempty"`
	Expiration           string        `protobuf:"bytes,9,opt,name=expiration,proto3" json:"expiration,omitempty"`
	MessageId            string        `protobuf:"bytes,10,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	UserId               string        `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AppId                string        `protobuf:"bytes,12,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ReplyTo              string        `protobuf:"bytes,13,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	CorrelationId        string        `protobuf:"bytes,14,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Headers              []*AMQPHeader `protobuf:"bytes,15,rep,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AMQPSinkRecord) Reset()         { *m = AMQPSinkRecord{} }
func (m *AMQPSinkRecord) String() string { return proto.CompactTextString(m) }
func (*AMQPSinkRecord) ProtoMessage()    {}
func (*AMQPSinkRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_67db462f137c19f7, []int{1}
}

func (m *AMQPSinkRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AMQPSinkRecord.Unmarshal(m, b)
}
func (m *AMQPSinkRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AMQPSinkRecord.Marshal(b, m, deterministic)
}
func (m *AMQPSinkRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AMQPSinkRecord.Merge(m, src)
}
func (m *AMQPSinkRecord) XXX_Size() int {
	return xxx_messageInfo_AMQPSinkRecord.Size(m)
}
func (m *AMQPSinkRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_AMQPSinkRecord.DiscardUnknown(m)
}

var xxx_messageInfo_AMQPSinkRecord proto.InternalMessageInfo

func (m *AMQPSinkRecord) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *AMQPSinkRecord) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *AMQPSinkRecord) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AMQPSinkRecord) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *AMQPSinkRecord) GetRoutingKey() string {
	if m != nil {
		return m.RoutingKey
	}
	return ""
}

func (m *AMQPSinkRecord) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *AMQPSinkRecord) GetContentEncoding() string {
	if m != nil {
		return m.ContentEncoding
	}
	return ""
}

func (m *AMQPSinkRecord) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *AMQPSinkRecord) GetExpiration() string {
	if m != nil {
		return m.Expiration
	}
	return ""
}

func (m *AMQPSinkRecord) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *AMQPSinkRecord) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *AMQPSinkRecord) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *AMQPSinkRecord) GetReplyTo() string {
	if m != nil {
		return m.ReplyTo
	}
	return ""
}

func (m *AMQPSinkRecord) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *AMQPSinkRecord) GetHeaders() []*AMQPHeader {
	if m != nil {
		return m.Headers
	}
	return nil
}

func init() {
	proto.RegisterType((*AMQPHeader)(nil), "records.AMQPHeader")
	proto.RegisterType((*AMQPSinkRecord)(nil), "records.AMQPSinkRecord")
}

func init() { proto.RegisterFile("records/amqp.proto", fileDescriptor_67db462f137c19f7) }

var fileDescriptor_67db462f137c19f7 = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x92, 0x5f, 0x6f, 0xd3, 0x30,
	0x14, 0xc5, 0x55, 0xba, 0x36, 0xed, 0x6d, 0xd7, 0x4d, 0x06, 0x34, 0x83, 0xf8, 0x53, 0x26, 0x21,
	0x95, 0x87, 0x25, 0x12, 0xf0, 0x8c, 0x04, 0x12, 0x12, 0x15, 0x42, 0x82, 0xb0, 0x17, 0x78, 0xa9,
	0x1c, 0xfb, 0x2a, 0xb1, 0x96, 0xc4, 0xc6, 0x76, 0xa6, 0xe5, 0xc3, 0xf2, 0x5d, 0x90, 0x6f, 0xd3,
	0x95, 0x37, 0x9f, 0xdf, 0x3d, 0xe7, 0xe4, 0x2a, 0x36, 0x30, 0x87, 0xd2, 0x38, 0xe5, 0x33, 0xd1,
	0xfc, 0xb1, 0xa9, 0x75, 0x26, 0x18, 0x96, 0x0c, 0xec, 0xf2, 0x3d, 0xc0, 0xc7, 0x6f, 0x3f, 0xbe,
	0x7f, 0x41, 0xa1, 0xd0, 0xb1, 0x73, 0x18, 0xdf, 0x60, 0xcf, 0x47, 0xeb, 0xd1, 0x66, 0x9e, 0xc7,
	0x23, 0x7b, 0x04, 0x93, 0x5b, 0x51, 0x77, 0xc8, 0x1f, 0x10, 0xdb, 0x8b, 0xcb, 0xbf, 0x63, 0x58,
	0xc5, 0xd8, 0x4f, 0xdd, 0xde, 0xe4, 0xd4, 0xc4, 0x18, 0x9c, 0x14, 0x46, 0xed, 0xb3, 0xcb, 0x9c,
	0xce, 0xec, 0x19, 0xcc, 0x83, 0x6e, 0xd0, 0x07, 0xd1, 0x58, 0x2a, 0x18, 0xe7, 0x47, 0x10, 0x13,
	0xa1, 0xb7, 0xc8, 0xc7, 0xd4, 0x4c, 0x67, 0xf6, 0x14, 0x66, 0x78, 0x27, 0x2b, 0xd1, 0x96, 0xc8,
	0x4f, 0x88, 0xdf, 0x6b, 0xf6, 0x12, 0x16, 0xce, 0x74, 0x41, 0xb7, 0xe5, 0x2e, 0x2e, 0x39, 0xa1,
	0x31, 0x0c, 0xe8, 0x2b, 0xf6, 0xec, 0x15, 0x2c, 0xa5, 0x69, 0x03, 0xb6, 0x61, 0x47, 0xc5, 0x53,
	0x72, 0x2c, 0x06, 0x76, 0x1d, 0xfb, 0xdf, 0xc0, 0xf9, 0xc1, 0x82, 0xad, 0x34, 0x4a, 0xb7, 0x25,
	0x4f, 0xc8, 0x76, 0x36, 0xf0, 0xcf, 0x03, 0x8e, 0xab, 0x58, 0xa7, 0x8d, 0xd3, 0xa1, 0xe7, 0xb3,
	0xf5, 0x68, 0x33, 0xc9, 0xef, 0x35, 0x7b, 0x01, 0x80, 0x77, 0x56, 0x3b, 0x11, 0xb4, 0x69, 0xf9,
	0x7c, 0xbf, 0xc9, 0x91, 0xb0, 0xe7, 0x00, 0x0d, 0x7a, 0x2f, 0x4a, 0xdc, 0x69, 0xc5, 0x81, 0xe6,
	0xf3, 0x81, 0x6c, 0x15, 0xbb, 0x80, 0xa4, 0xf3, 0xe8, 0xe2, 0x6c, 0x41, 0xb3, 0x69, 0x94, 0x5b,
	0xc5, 0x1e, 0xc3, 0x54, 0x58, 0x1b, 0xf9, 0x72, 0xff, 0xbb, 0x85, 0xb5, 0x5b, 0xc5, 0x9e, 0xc0,
	0xcc, 0xa1, 0xad, 0xfb, 0x5d, 0x30, 0xfc, 0x94, 0x06, 0x09, 0xe9, 0x6b, 0xc3, 0x5e, 0xc3, 0x4a,
	0x1a, 0xe7, 0xb0, 0xa6, 0x0f, 0xc7, 0xe4, 0x8a, 0x0c, 0xa7, 0xff, 0xd1, 0xad, 0x62, 0x57, 0x90,
	0x54, 0x74, 0xc5, 0x9e, 0x9f, 0xad, 0xc7, 0x9b, 0xc5, 0xdb, 0x87, 0xe9, 0xf0, 0x02, 0xd2, 0xe3,
	0xf5, 0xe7, 0x07, 0xcf, 0xa7, 0x5f, 0x70, 0xe1, 0xab, 0xb4, 0x10, 0x41, 0x56, 0x29, 0xde, 0x62,
	0x1b, 0xfc, 0xc1, 0xfe, 0xfb, 0x43, 0xa9, 0x43, 0xd5, 0x15, 0xa9, 0x34, 0x4d, 0x46, 0x06, 0x69,
	0x9c, 0xcd, 0xa4, 0xa9, 0x6b, 0x94, 0xc1, 0xb8, 0x2b, 0x2f, 0x2b, 0x6c, 0x84, 0xcf, 0x8a, 0x4e,
	0xd7, 0x2a, 0x2b, 0x4d, 0x46, 0x0f, 0xce, 0x67, 0x43, 0xbe, 0x98, 0x92, 0x7e, 0xf7, 0x2f, 0x00,
	0x00, 0xff, 0xff, 0x58, 0x21, 0x9b, 0x63, 0x96, 0x02, 0x00, 0x00,
}
